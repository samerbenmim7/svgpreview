// DraggableGroup.jsx
import React, { useRef,useState,useEffect } from 'react';
import Draggable from 'react-draggable';

export default function DraggableGroup({
  svgString,
  zoom,
  position,
  onDrag,
  onStop,
  index,
  setSelectedBlockIndex
}) {
    const nodeRef = useRef(null);
    const [isCorrected, setIsCorrected] = useState(false);
    const [isDragging, setIsDragging] = useState(false);
    const [localPos, setLocalPos] = useState(position);
    const pendingStopRef = useRef(null);


  useEffect(() => {
    if (!isDragging) {
      setLocalPos(position);
    }
  }, [position, isDragging]);
  const handleStart = () => {
    setSelectedBlockIndex(index)
    setIsDragging(true)
  }


  const handleStop = (e,data) => {
    setIsDragging(false);
    if (!nodeRef.current) return;

    const bbox = nodeRef.current.getBBox();
    const svg = nodeRef.current.ownerSVGElement;
    if (!svg) return;

    const svgWidth = svg.viewBox.baseVal.width || svg.clientWidth;
    const svgHeight = svg.viewBox.baseVal.height || svg.clientHeight;

    let { x, y } = data;

    const overRight = bbox.x + x + bbox.width > svgWidth;
    const overLeft = bbox.x + x < 0;
    const overTop = bbox.y + y < 0;
    const overBottom = bbox.y + y + bbox.height > svgHeight;

    if (overRight) x -= (bbox.x + x + bbox.width - svgWidth);
    if (overLeft) x -= (bbox.x + x);
    if (overTop) y -= (bbox.y + y);
    if (overBottom) y -= (bbox.y + y + bbox.height - svgHeight);

    const corrected = x !== data.x || y !== data.y;
    setLocalPos({ x, y });

    if(!corrected){
        setIsCorrected(false);
        onStop(e,data)
    }

else {
    setIsCorrected(true);

    setLocalPos({ x, y});
    pendingStopRef.current = { e, x, y };
}
  }


  const handleTransitionEnd = () => {
    if (pendingStopRef.current) {
      const { e, data } = pendingStopRef.current;
 //     onStop?.(e, data); // âœ… Call after animation
      pendingStopRef.current = null;
      setIsCorrected(false);

    }
  };
    

  return (
    <Draggable
      nodeRef={nodeRef}
      scale={zoom / 100}
      position={localPos}      
      onStart={handleStart}
      onDrag={onDrag}
      onStop={handleStop}
      defaultClassName="draggable"
      defaultClassNameDragging="draggable-active"
      // bounds={bounds} 

    >
      <g
        ref={nodeRef}
        pointerEvents="bounding-box"
        dangerouslySetInnerHTML={{ __html: svgString }}
        onTransitionEnd={handleTransitionEnd}

        style={{
            outline: isDragging ? '2px dashed #4caf50' : 'none',
            transition: !isCorrected ? 'none' : 'transform 0.3s ease',
          }}
      />
    </Draggable>
  );
}
